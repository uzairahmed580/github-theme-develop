<announcement-bar class="announcement-bar announcement-bar-slider" data-section-type="bar-slider" data-section-id="bar-slider">
  {%- for block in section.blocks -%}
  <div class="announcement-bar-item announcement-bar-item-{{ forloop.index }} {% unless forloop.first %} announcement-bar-item-hidden announcement-bar-item-hidden-{{ forloop.index | minus: 1 }} {% endunless %}" style="background-color:{{ block.settings.background_color }};">
  
      {%- if block.settings.text != blank -%}
        {%- if block.settings.link != blank -%}
          <a class="announcement-bar--link" href="/collections/packs">
        {%- endif -%}
            <p class="announcement-bar__message {{ block.settings.text_alignment }}" style="color:{{ block.settings.color_scheme }};">              
              <span class="message-text">{{ block.settings.text | escape }}</span>           
            </p>
        {%- if block.settings.link != blank -%}
        </a>
        {%- endif -%}
      {%- endif -%}
 
  </div>
{%- endfor -%}
</announcement-bar>

<script>
  window.theme = window.theme || {};


  class BarSliderSection extends HTMLElement {
    constructor() {
      super();

      var $container = (this.$container = this);
      this.selectors = {
          barItemHiddenClass: 'announcement-bar-item-hidden-1',
          barItemHiddenClass2: 'announcement-bar-item-hidden-2',
          barItemCurrentClass: 'announcement-bar-item-current',
          barItemSelector: '.announcement-bar-item'
      };
      this.$barItems = $(this.selectors.barItemSelector);
      this.barItemsCount = this.$barItems.length - 1;
      this.initBarSlider();
    }
  
    initBarSlider() {
      var _this = this;
      var currentIndex = 0;
      setInterval(function(){
        _this.$barItems.animate({'top': '-=100%'}, 1000, function(){
            var thisIndex = $(this).index();
            
            if (thisIndex == currentIndex) {
              $(this).removeClass(_this.selectors.barItemCurrentClass);
              $(this).css('top', (_this.barItemsCount)*100 + '%');
              var $nextItem = thisIndex === _this.barItemsCount ? _this.$barItems.eq(0) : _this.$barItems.eq(thisIndex + 1);
              $nextItem.addClass(_this.selectors.barItemCurrentClass);
            }
            if (thisIndex === _this.barItemsCount){
              if (currentIndex === _this.barItemsCount) {
                currentIndex = 0;
              }
              else {
                currentIndex++;
              }
            }
        });
      }, 5000);
  }
  
  }
  
  customElements.define('announcement-bar', BarSliderSection);

</script>
<style>
  .announcement-bar {
    transition: all .3s;
    overflow: hidden
  }
  .announcement-bar {
    display: block;
    text-align: center;
    position: relative;
    text-decoration: none
  }
  .announcement-bar .announcement-bar-item {
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    justify-content: center;
    padding: 2px 15px 2px;
    position: absolute;
    width: 100%;
    top: 0%;
    left: 0
  }
  .announcement-bar__message {
    display: block;
    font-size: 11px;
    font-weight: 600;
    font-family: 'Inter';
    margin: 0;
    padding:0;
  }
  .announcement-bar .announcement-bar-item.announcement-bar-item-hidden-1 {
    top: 100%
  }
  .announcement-bar .announcement-bar-item.announcement-bar-item-hidden-2 {
    top: 200%
  }
  .announcement-bar .announcement-bar__message {
    width: 100%
  }
  .announcement-bar {
    height: 22px;
    background-color: rgb(242, 238, 235);
  }
  .announcement-bar-item {
    height: 22px;
  }

  @media screen and (max-width: 1024px) {
    .announcement-bar {
        height: 22px;
    }
    .announcement-bar-item {
        height: 22px;
    }
  } 
</style>
{% comment %} {%- for block in section.blocks -%}
  {%- case block.type -%}
    {%- when 'announcement' -%}
      <div class="announcement-bar color-{{ block.settings.color_scheme }} gradient" role="region" aria-label="{{ 'sections.header.announcement' | t }}" {{ block.shopify_attributes }}>
        {%- if block.settings.text != blank -%}
          {%- if block.settings.link != blank -%}
            <a href="{{ block.settings.link }}" class="announcement-bar__link link link--text focus-inset animate-arrow">
          {%- endif -%}
              <div class="page-width">
                <p class="announcement-bar__message {{ block.settings.text_alignment }} h5">
                  <span>{{ block.settings.text | escape }}</span>
                  {%- if block.settings.link != blank -%}
                    {% render 'icon-arrow' %}
                  {%- endif -%}
                </p>
              </div>
          {%- if block.settings.link != blank -%}
            </a>
          {%- endif -%}
        {%- endif -%}
      </div>
  {%- endcase -%}
{%- endfor -%} {% endcomment %}

{% schema %}
{
  "name": "t:sections.announcement-bar.name",
  "max_blocks": 12,
  "class": "announcement-bar-section",
  "blocks": [
    {
      "type": "announcement",
      "name": "t:sections.announcement-bar.blocks.announcement.name",
      "settings": [
        {
          "type": "text",
          "id": "text",
          "default": "Welcome to our store",
          "label": "t:sections.announcement-bar.blocks.announcement.settings.text.label"
        },
        {
          "type": "select",
          "id": "text_alignment",
          "options": [
            {
              "value": "left",
              "label": "t:sections.announcement-bar.blocks.announcement.settings.text_alignment.options__1.label"
            },
            {
              "value": "center",
              "label": "t:sections.announcement-bar.blocks.announcement.settings.text_alignment.options__2.label"
            },
            {
              "value": "right",
              "label": "t:sections.announcement-bar.blocks.announcement.settings.text_alignment.options__3.label"
            }
          ],
          "default": "center",
          "label": "t:sections.announcement-bar.blocks.announcement.settings.text_alignment.label"
        }, 
        {
          "type": "color",
          "id": "background_color",
          "label": "Background color",
          "default": "#FFFFFF"
        },
        {
          "type": "color",
          "id": "color_scheme",
          "label": "Text Color",
          "default": "#000"
        },    
        {
          "type": "url",
          "id": "link",
          "label": "t:sections.announcement-bar.blocks.announcement.settings.link.label"
        }
      ]
    }
  ],
  "default": {
    "blocks": [
      {
        "type": "announcement"
      }
    ]
  }
}
{% endschema %}
