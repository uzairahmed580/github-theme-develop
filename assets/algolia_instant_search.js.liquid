/* eslint-disable object-shorthand */
/* eslint-disable prefer-arrow-callback */
/* eslint-disable vars-on-top */
/* eslint-disable strict */
/* eslint-disable no-var */
/* eslint-disable complexity */
(function (algolia) {
    'use strict';
    var instantsearch = algolia.externals.instantsearch;
    var algoliasearch = algolia.externals.algoliasearch;
    var searchBox = algolia.externals.widgets.searchBox;
    var stats = algolia.externals.widgets.stats;
    var sortBy = algolia.externals.widgets.sortBy;
    var clearRefinements = algolia.externals.widgets.clearRefinements;
    var panel = algolia.externals.widgets.panel;
    var hits = algolia.externals.widgets.hits;
    var pagination = algolia.externals.widgets.pagination;
    var configure = algolia.externals.widgets.configure;
    var rangeInput = algolia.externals.widgets.rangeInput;
    var rangeSlider = algolia.externals.widgets.rangeSlider;
    var objectHits = [];
    var connectCurrentRefinements =
        algolia.externals.connectors.connectCurrentRefinements;
    window.algoliaItems = [];
  
    var collectionPageEnabled =
        algolia.is_collection_results_page &&
        algolia.config.instant_search_enabled_on_collection;
  
    var targetIndexName = collectionPageEnabled
        ? algolia.config.index_prefix + 'products_published_at_desc'
        : algolia.config.index_prefix + 'products_kyxrating_descending';
  
     console.log('targetIndexName---',targetIndexName);
    if (!algolia.full_results && !algolia.is_collection_results_page) {
        /**
         * If we aren't on the search page and neither on a collection page,
         * then there's no need to proceed
         */
        return;
    } else if (algolia.full_results) {
        /**
         * If we are on the search page and instant search isn't enabled,
         * then there's no need to proceed
         */
        if (!algolia.config.instant_search_enabled) {
            return;
        }
    } else if (algolia.is_collection_results_page) {
        /**
         * If we are on a collection page and instant search on collection isn't
         * enabled, then there's no need to proceed
         */
        if (!algolia.config.instant_search_enabled_on_collection) {
            return;
        }
    }
  
    /**
     * Array which will contain all filters to be applied while initiating the
     * search API call.
     */
    var searchFilters = [];
  
    var collectionFacetFilter = null;
    var collectionRulesContextValue = null;
    var collectionHandle = null;
   //console.log('123--',targetIndexName);
    if (collectionPageEnabled) {
        var matches = window.location.pathname.match(/\/collections\/([^/]+)/i);
        collectionHandle =
            Boolean(matches) && matches.length === 2 ? matches[1] : null;
       
        if (algolia.config.collection_id_indexing) {
            collectionFacetFilter = algolia.current_collection_id
                ? 'collection_ids:"' + algolia.current_collection_id + '"'
                : null;
        } else {
            collectionFacetFilter = 'collections:"' + collectionHandle + '"';
        }
  
        // Add the collection filter to the list of search filters
        searchFilters.push(collectionFacetFilter);
  
        collectionRulesContextValue = algolia.config.collection_id_query_rules
            ? algolia.current_collection_id
            : collectionHandle;
    }
  
    // Filters for stock policy
    var stockPolicyFilter = null;
    if (algolia.config.stock_policy) {
        if (algolia.config.stock_policy === 'allow') {
            /**
             * For 'allow', we don't need to add any filter as we want to continue
             * displaying all out of stock items.
             */
        } else if (algolia.config.stock_policy === 'deny') {
            // For 'deny' we will filter out all items based on inventory quantity
            stockPolicyFilter = 'inventory_quantity > 0';
        } else if (algolia.config.stock_policy === 'continue') {
            /**
             * For 'continue' we will filter on `inventory_available` attribute whose
             * value is dependent on:
             * `inventory_quantity > 0 OR inventory_policy == 'continue'`
             */
            stockPolicyFilter = 'inventory_available:true';
        }
  
        // Add the stock policy filter to the list of search filters
        if (stockPolicyFilter) {
            searchFilters.push(stockPolicyFilter);
        }
    }
  
    var results_selector = collectionPageEnabled
        ? algolia.config.collection_css_selector
        : algolia.config.results_selector; 
  
    console.log('algolia.sortOrders=======>', algolia.collectionSortOrders, algolia.sortOrders);
    var activeSortOrders =
        collectionPageEnabled && algolia.collectionSortOrders
            ? algolia.collectionSortOrders
            : algolia.sortOrders;
    
    results_selector += ', .algolia-shopify-instantsearch';
  
    function getTrackedUiState(uiState) {
        var trackedUiState = {};
        Object.keys(uiState).forEach(function (k) {
            if (k === 'configure' || k === 'query' || k === 'q') {
                return;
            }
            trackedUiState[k] = uiState[k];
        });
        return trackedUiState;
    }
  
    /**
     * List of URL params which are "allowed" by InstantSearch.
     * These parameters won't be overwritten when the search state is written
     * to the URL.
     */
    var ALLOWED_FOREIGN_PARAMS = [
        'utm_source',
        'utm_medium',
        'utm_campaign',
        'utm_term',
        'utm_content',
    ];
    var foreignRouteState;
  
    function singleIndex(indexName) {
        return {
            /**
             * `stateToRoute` method transforms the `uiState` object from InstantSearch
             * into an object that will then be serialized to construct the URL.
             */
            stateToRoute: function (uiState) {
                var route = getTrackedUiState(uiState[indexName] || {});
                route.q = uiState[indexName].query;
                return Object.assign({}, foreignRouteState, route);
            },
  
            /**
             * `routeToState` method transforms the route object into a `uiState` object
             * so that InstantSearch is initialized with the correct state from the
             * URL.
             */
            routeToState: function (routeState) {
                /**
                 * Backup parameters from `routeState` into a different object
                 * `foreignRouteState` so that we can re-inject them into the object
                 * returned within `stateToRoute`.
                 * This allows us to preserve the parameters specified in `ALLOWED_FOREIGN_PARAMS`
                 * array.
                 */
                if (!foreignRouteState) {
                    foreignRouteState = ALLOWED_FOREIGN_PARAMS.reduce(function (acc, key) {
                        acc[key] = routeState[key];
                        return acc;
                    }, {});
                }
  
                var state = {};
                state[indexName] = getTrackedUiState(routeState || {});
                state[indexName].query = routeState.q;
                return state;
            },
        };
    }
  
    var instant = {
        colors: algolia.config.colors,
        distinct: Boolean(algolia.config.show_products),
        facets: {
            hidden:
                collectionPageEnabled && algolia.collectionHiddenFacets
                    ? algolia.collectionHiddenFacets
                    : algolia.hiddenFacets,
            shown:
                collectionPageEnabled && algolia.collectionShownFacets
                    ? algolia.collectionShownFacets
                    : algolia.shownFacets,
            list:
                collectionPageEnabled && algolia.collectionFacets
                    ? algolia.collectionFacets
                    : algolia.facets,
            widgets:
                collectionPageEnabled && algolia.collectionFacetsWidgets
                    ? algolia.collectionFacetsWidgets
                    : algolia.facetsWidgets,
        },
        hitsPerPage:
            collectionPageEnabled &&
                algolia.config.collections_full_results_hits_per_page
                ? algolia.config.collections_full_results_hits_per_page
                : algolia.config.products_full_results_hits_per_page,
        search: instantsearch({
            searchClient: algoliasearch(
                algolia.config.app_id,
                algolia.config.search_api_key
            ),
            insights: algolia.config.analytics_enabled,
            // indexName: algolia.config.index_prefix + 'products',      
            indexName: targetIndexName,
            routing: {
                // stateMapping: singleIndex(algolia.config.index_prefix + 'products'),        
                stateMapping: singleIndex(targetIndexName),
            },
            searchFunction: function (searchFunctionHelper) {
                // Set query parameters here because they're not kept when someone
                // presses the Back button if set in the `init` function of a custom widget
                var page = searchFunctionHelper.getPage();
                if (instant.distinct) {
                    searchFunctionHelper.setQueryParameter('distinct', true);
                }
  
                // Assign any required filters
                if (searchFilters.length) {
                    searchFunctionHelper.setQueryParameter(
                        'filters',
                        searchFilters.join(' AND ')
                    );
                }
  
                // Assign any required `ruleContexts` which are required for query rules
                // targeting collection pages
                if (collectionPageEnabled) {
                    console.log('heee---',collectionPageEnabled);
                    // Collection page merchandising:
                    // If we are on a collection page, `collectionRulesContextValue` is defined
                    if (collectionRulesContextValue) {
                        searchFunctionHelper.setQueryParameter('ruleContexts', [
                            collectionRulesContextValue.toString(),
                        ]);
                    } else {
                        searchFunctionHelper.setQueryParameter('ruleContexts', []);
                    }
                }
  
                searchFunctionHelper.setPage(page);
                searchFunctionHelper.search();
            },
        }),
        selector: results_selector + ', .algolia-shopify-instantsearch',
        sortOrders: activeSortOrders
    };
  
    instant.search.client.addAlgoliaAgent('Shopify Integration');
  
    algolia.instantsearch = instant;
  
  
    function readjust() {
        var width = instant.$results.offsetWidth;
  
        var suffix = 'lg';
        if (width < 400) suffix = 'xs';
        else if (width < 800) suffix = 'sm';
        else if (width < 1200) suffix = 'md';
  
        instant.$results.classList.remove('ais-results-size-xs');
        instant.$results.classList.remove('ais-results-size-sm');
        instant.$results.classList.remove('ais-results-size-md');
        instant.$results.classList.remove('ais-results-size-lg');
        instant.$results.classList.add('ais-results-size-' + suffix);
    }
  
  
    //Link CSS and set up CSS variables
    const cssFile = document.getElementById('template_algolia_instant_search.css');
    document.documentElement.style.setProperty(`--main-color`, `${algolia.config.colors.main}`);
    document.documentElement.style.setProperty(`--secondary-color`, `${algolia.config.colors.secondary}`);
    document.documentElement.style.setProperty(`--highlight-bg-color`, `${algolia.helpers.hexToRGB(algolia.config.colors.highlight)}`);
    algolia.appendStyle(cssFile.text);
  
    if (collectionPageEnabled) {
        if (
            document.querySelectorAll(algolia.config.collection_css_selector)
                .length === 0
        ) {
            throw new Error(
                'Instant search CSS selector for collection page is incorrect\nFor more info see: https://www.algolia.com/doc/integration/shopify/advanced-customization/collection-search-page/#css-selector'
            );
        }
    } else if (
        document.querySelectorAll(algolia.config.results_selector).length === 0
    ) {
        throw new Error(
            'Instant search CSS selector is incorrect\nFor more info see: https://www.algolia.com/doc/integration/shopify/building-search-ui/instant-search/#css-selector'
        );
    }
  
    // Instantiating the main page
    instant.$results = document.querySelector(instant.selector);
    instant.$results.innerHTML = '';
  
    algolia.render(algolia.instantSearchMainTemplate, instant.$results, {
        facets: instant.facets.list,
        multipleSortOrders: activeSortOrders.length > 1,
    });
  
    readjust();
  
    window.addEventListener('resize', function () {
        readjust();
    });
  
    // Mobile facets display
  instant.search.addWidgets([
        {
            init: function () {
                var $button = document.querySelector('.ais-facets-button');
                $button.addEventListener('click', function () {
                    var $facets = document.querySelector('.ais-facets');
  
                    if ($facets.classList.contains('ais-facets__shown')) {
                        $button.textContent = 'Show filters';
                        $facets.classList.remove('ais-facets__shown');
                    } else {
                        $button.textContent = 'Hide filters';
                        $facets.classList.add('ais-facets__shown');
                    }
                });
            },
        },
    ]);

  
    instant.search.addWidgets([
        configure({
            hitsPerPage: instant.hitsPerPage,
            clickAnalytics: true,
            facetingAfterDistinct: Boolean(algolia.config.show_products),
            ruleContexts: ['available_products_show'],
        }),
    ]);
  
    // Search input
    instant.search.addWidgets([
        searchBox({
            container: '.ais-search-box-container',
            placeholder: algolia.translations.searchForProduct,
            showReset: false,
            showSubmit: false,
        }),
    ]);
  
    // Logo & clear
    instant.search.addWidgets([
        {
            init: function (opts) {
                document
                    .querySelector('.ais-clear-input-icon')
                    .addEventListener('click', function () {
                        opts.helper.setQuery('').search();
                        var input = document.querySelector('.ais-search-box--input');
                        input.value = '';
                        input.focus();
                    });
            },
            render: function (opts) {
                if (!opts.state.query) {
                    document.querySelector('.ais-clear-input-icon').style.display =
                        'none';
                } else {
                    document.querySelector('.ais-clear-input-icon').style.display = '';
                }
            },
        },
    ]);
  
    // Stats
    instant.search.addWidgets([
        stats({
            container: '.ais-stats-container',
            templates: {
                text(data, { html }) {
                    let count = '';
                    document.dispatchEvent(new CustomEvent("swym:collections-loaded"));
                    if (data.hasManyResults) {
                        count += `${data.nbHits} results`;
                    } else if (data.hasOneResult) {
                        count += `1 result`;
                    } else {
                        count += `No result`;
                    }
  
                    // console.log('Count =======>', count);
                    setTimeout(function() {
                    if(objectHits.length > 0) {
                    objectHits.forEach((item) => {
                      if(window.location.href.indexOf('shopify_products_published_at_desc') > 0 && window.location.href.indexOf('price') > 0) {
                        if(item.tags.indexOf('deals_$100-1') >= 0) {
                          if(document.querySelector(`[data-handle="${item.handle}"]`) != null) {
                            document.querySelector(`[data-handle="${item.handle}"]`).closest('li').classList.add('order-1');  
                          }
                        }
                    
                        if(item.tags.indexOf('deals_$100-2') >= 0) {
                          if(document.querySelector(`[data-handle="${item.handle}"]`) != null) {
                            document.querySelector(`[data-handle="${item.handle}"]`).closest('li').classList.add('order-2');  
                          }
                        }
                    
                        if(item.tags.indexOf('deals_$100-3') >= 0) {
                          if(document.querySelector(`[data-handle="${item.handle}"]`) != null) {
                            document.querySelector(`[data-handle="${item.handle}"]`).closest('li').classList.add('order-3');  
                          }
                        }
                      }
            
                      if(window.location.href.indexOf('shopify_products_recently_ordered_count_desc') > 0) {
                        if(item.tags.indexOf('featured-1') >= 0) {
                        if(document.querySelector(`[data-handle="${item.handle}"]`) != null) {
                          document.querySelector(`[data-handle="${item.handle}"]`).closest('li').classList.add('order-1');  
                        }
                      }
                  
                      if(item.tags.indexOf('featured-2') >= 0) {
                        if(document.querySelector(`[data-handle="${item.handle}"]`) != null) {
                          document.querySelector(`[data-handle="${item.handle}"]`).closest('li').classList.add('order-2');  
                        }
                      }
                  
                      if(item.tags.indexOf('featured-3') >= 0) {
                        if(document.querySelector(`[data-handle="${item.handle}"]`) != null) {
                          document.querySelector(`[data-handle="${item.handle}"]`).closest('li').classList.add('order-3');  
                        }
                      }
                      } 
                    })
                  }
                  }, 1000)
                    return html`<span>${count} found</span>`;
                }
            }
        }),
    ]);
   
  
    // Sort orders
    if (activeSortOrders.length > 1) {
        instant.search.addWidgets([
            sortBy({
                container: '.ais-sort-orders-container',
                items: instant.sortOrders,
            }),
        ]);
    }
   setTimeout(function () {
   //option color
     if(document.querySelector('.ais-filter-options-color')) {
      instant.search.addWidgets([
          algolia.externals.widgets.refinementList({
             container: document.querySelector('.ais-filter-options-color'),
             attribute: 'options.color',
              limit: 100,
              searchable: true, // Setting searchable to true creates a search input in the refinementList UI        
              templates: {
                  item(item, { html }) {
                           if (item.label !== 'NA') {
                              const { url, label, count, isRefined } = item;
                              const vars = document.querySelector('.showing-more-colors');
                              const hiddenClass = vars === null && item.hidden ? 'hidden' : ''; 
                              return html`
                                  <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}" class="ais-refinement-list--item ${hiddenClass}">
                                      <span>${label}</span>
                                  </a>
                              `;
                          }
                  },
              },
              transformItems(items, { results }) {
                  items = items.sort(function(a, b){return parseFloat(a.value) - parseFloat(b.value)});
                   const visibleItemsCount = items.filter(item => !item.hidden).length;
                    if (visibleItemsCount <= 4) {
                        document.querySelector('.btn_show_colors').style.display = 'none';
                    } else {
                        document.querySelector('.btn_show_colors').style.display = 'block';
                    }
                    if (results.page === 0) {
                        items.forEach((item, index) => {
                            if (index >= 4) {
                                item.hidden = true;
                            }
                        });
                    }
                  
                  return items;
              },
          })
      ]);

       
      var showMoreButtonColors = document.createElement('button');
      showMoreButtonColors.textContent = 'Show More';
      showMoreButtonColors.classList.add('btn_show_colors');
      document.querySelector('.ais-filter-options-color').appendChild(showMoreButtonColors);
      showMoreButtonColors.addEventListener('click', function() {
          const items = document.querySelectorAll('.ais-filter-options-color .ais-refinement-list--item');
          const buttonText = this.textContent.trim();
          const showMore = buttonText === 'Show More';
          items.forEach((item, index) => {
              if (index >= 4) {
                  item.classList.toggle('hidden', !showMore);
              }
          });
          this.textContent = showMore ? 'Show Less' : 'Show More';
          const refinementList = document.querySelector('.ais-filter-options-color');
          refinementList.classList.toggle('showing-more-colors', showMore);
      });

     }
     // option langth
     if(document.querySelector('.ais-filter-options-length')) {
     instant.search.addWidgets([
          algolia.externals.widgets.refinementList({
              container: document.querySelector('.ais-filter-options-length'),
             attribute: 'options.length',
              limit: 100,
              searchable: true, // Setting searchable to true creates a search input in the refinementList UI        
              templates: {
                  item(item, { html }) {
                           if (item.label !== 'NA') {
                              const { url, label, count, isRefined } = item;
                              const vars = document.querySelector('.showing-more-length');
                              const hiddenClass = vars === null && item.hidden ? 'hidden' : ''; 
                              return html`
                                  <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}" class="ais-refinement-list--item ${hiddenClass}">
                                      <span>${label}</span>
                                  </a>
                              `;
                          }
                  },
              },
              transformItems(items, { results }) {
                  items = items.sort(function(a, b){return parseFloat(a.value) - parseFloat(b.value)});
                   const visibleItemsCount = items.filter(item => !item.hidden).length;
                    if (visibleItemsCount <= 4) {
                        document.querySelector('.btn_show_length').style.display = 'none';
                    } else {
                        document.querySelector('.btn_show_length').style.display = 'block';
                    }
                    if (results.page === 0) {
                        items.forEach((item, index) => {
                            if (index >= 4) {
                                item.hidden = true;
                            }
                        });
                    }
                  
                  return items;
              },
          })
      ]);
      
      var showMoreButtonColors = document.createElement('button');
      showMoreButtonColors.textContent = 'Show More';
      showMoreButtonColors.classList.add('btn_show_length');
      document.querySelector('.ais-filter-options-length').appendChild(showMoreButtonColors);
      showMoreButtonColors.addEventListener('click', function() {
          const items = document.querySelectorAll('.ais-filter-options-length .ais-refinement-list--item');
          const buttonText = this.textContent.trim();
          const showMore = buttonText === 'Show More';
          items.forEach((item, index) => {
              if (index >= 4) {
                  item.classList.toggle('hidden', !showMore);
              }
          });
          this.textContent = showMore ? 'Show Less' : 'Show More';
          const refinementList = document.querySelector('.ais-filter-options-length');
          refinementList.classList.toggle('showing-more-length', showMore);
      });
      }
   }, 500)
  
    setTimeout(function () {
  
        instant.search.addWidgets([
            algolia.externals.widgets.rangeInput({
                container: document.querySelector('.ais-filter-price'),
                attribute: 'price',
                searchable: true, // Setting searchable to true creates a search input in the refinementList UI        
                templates: {
                    // Use the Hogan templates utilising `[]` delimiters
                    item: algolia.getTemplate('instant_search_facet_item'),
                    showMoreText: algolia.getTemplate('instant_search_facet_show_more')
                }
            })
        ])

      

      //size
       if(document.querySelector('.ais-filter-options-size')) {
       instant.search.addWidgets([
          algolia.externals.widgets.refinementList({
              container: document.querySelector('.ais-filter-options-size'),
              attribute: 'options.size',
              searchable: true,
              limit: 100,
              templates: {
                  item(item, { html }) {
                      if (item.label !== 'NA') {
                          const { url, label, count, isRefined } = item;
                          const vars = document.querySelector('.showing-more-size');
                          const hiddenClass = vars === null && item.hidden ? 'hidden' : '';
                          return html`
                              <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}" class="ais-refinement-list--item ${hiddenClass}">
                                  <span>${label}</span>
                              </a>
                          `;
                      }
                  },
              },
              transformItems(items, { results }) {
                  var priority = ["13C", "7Y/8.5W", "6.5Y/8W", "6Y/7.5W", "5.5Y/7W", "5Y/6.5W", "4.5Y/6W", "11W/9.5M", "9.5W/8M", "6.5W/8M", "14M/15.5W", "13M/14.5W", "13M/14.5W", "12.5M/14W", "12M/13.5W", "11.5W/10M", "11.5M/13W", "11M/13W", "11M/12.5W", "11M/12W", "10.5M/12W", "10M/12W", "10M/11.5W", "9.5M/11W", "9M/10.5W", "9M/10W", "8.5M/10W", "8M/10W", "8M/9.5W", "8M/9W", "8M/6.5W", "7.5M/9W", "7M/8W", "7M/8.5W", "6.5M/8W", "6M/7.5W", "5.5M/7W", "5.5M/6.5W", "5M/7W", "5M/6.5W", "4.5M/6W", "4M/5.5W"];
                  items.sort((a, b) => priority.indexOf(b.value) - priority.indexOf(a.value));
                   const visibleItemsCount = items.filter(item => !item.hidden).length;
                    if (visibleItemsCount <= 4) {
                        document.querySelector('.btn_show_size').style.display = 'none';
                    } else {
                        document.querySelector('.btn_show_size').style.display = 'block';
                    }
                    if (results.page === 0) {
                        items.forEach((item, index) => {
                            if (index >= 4) {
                                item.hidden = true;
                            }
                        });
                    }
                  return items;
              },
          })
      ]);
      var showMoreButtonSize = document.createElement('button');
      showMoreButtonSize.textContent = 'Show More';
      showMoreButtonSize.classList.add('btn_show_size');
      document.querySelector('.ais-filter-options-size').appendChild(showMoreButtonSize);
      showMoreButtonSize.addEventListener('click', function() {
          const items = document.querySelectorAll('.ais-filter-options-size .ais-refinement-list--item');
          const buttonText = this.textContent.trim();
          const showMore = buttonText === 'Show More';
          items.forEach((item, index) => {
              if (index >= 4) {
                  item.classList.toggle('hidden', !showMore);
              }
          });
          this.textContent = showMore ? 'Show Less' : 'Show More';
          const refinementList = document.querySelector('.ais-filter-options-size');
              refinementList.classList.toggle('showing-more-size', showMore);
      });
  };
  
        //brand---
      if(document.querySelector('.ais-filter-meta-custom-brand')) {
       instant.search.addWidgets([
              algolia.externals.widgets.refinementList({
                  container: document.querySelector('.ais-filter-meta-custom-brand'),
                  attribute: 'meta.custom.Brand',
                  limit: 100,
                  searchable: false,
                  templates: {
                     item(item, { html }) {
                          if (item.label !== 'NA') {
                              const { url, label, count, isRefined } = item;
                              const vars = document.querySelector('.showing-more-brand');
                              const hiddenClass = vars === null && item.hidden ? 'hidden' : ''; 
                              return html`
                                  <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}" class="ais-refinement-list--item ${hiddenClass}">
                                      <span>${label}</span>
                                  </a>
                              `;
                          }
                      },
                  },
                  transformItems(items, { results }) {
                      const specificBrands = ['Nike', 'Jordan', 'Adidas', 'New Balance'];
          
                      items.sort((a, b) => {
                          const indexA = specificBrands.indexOf(a.label);
                          const indexB = specificBrands.indexOf(b.label);
          
                          if (indexA === -1) {
                              return 1; // Move to the end
                          } else if (indexB === -1) {
                              return -1; // Move to the end
                          }
                          return indexA - indexB;
                      });
          
                       const visibleItemsCount = items.filter(item => !item.hidden).length;

                        if (visibleItemsCount <= 4) {
                            document.querySelector('.btn_show_brand').style.display = 'none';
                        } else {
                            document.querySelector('.btn_show_brand').style.display = 'block';
                        }
            
                        if (results.page === 0) {
                            items.forEach((item, index) => {
                                if (index >= 4) {
                                    item.hidden = true;
                                }
                            });
                        }
                      return items;
                  },
              })
          ]);
          var showMoreButtonBrand = document.createElement('button');
          showMoreButtonBrand.textContent = 'Show More';
          showMoreButtonBrand.classList.add('btn_show_brand');
          document.querySelector('.ais-filter-meta-custom-brand').appendChild(showMoreButtonBrand);
          
          showMoreButtonBrand.addEventListener('click', function(e) {
              e.preventDefault();
              const items = document.querySelectorAll('.ais-filter-meta-custom-brand .ais-refinement-list--item');
              const buttonText = this.textContent.trim();
              const showMore = buttonText === 'Show More';
              items.forEach((item, index) => {
                  if (index >= 4) {
                      item.classList.toggle('hidden', !showMore);
                  }
              });
              this.textContent = showMore ? 'Show Less' : 'Show More';
              const refinementList = document.querySelector('.ais-filter-meta-custom-brand');
              refinementList.classList.toggle('showing-more-brand', showMore);
          });
      };
      
        //model
       if(document.querySelector('.ais-filter-meta-custom-mtw_category')) {
        function applySorting() {
         
              instant.search.addWidgets([
                  algolia.externals.widgets.refinementList({
                      container: document.querySelector('.ais-filter-meta-custom-mtw_category'),
                      attribute: 'meta.custom.mtw_category',
                      limit: 100,
                      searchable: false,
                      templates: {
                          item(item, { html }) {
                            if (item.label !== 'NA') {
                                const { url, label, count, isRefined } = item;
                                const vars = document.querySelector('.showing-more-model');
                                const hiddenClass = vars === null && item.hidden ? 'hidden' : ''; 
                                return html`
                                    <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}" class="ais-refinement-list--item ${hiddenClass}">
                                        <span>${label}</span>
                                    </a>
                                `;
                              }
                          },
                      },
                      transformItems(items, { results }) {
                          const isJordanBrand = window.location.href.includes('meta.custom.Brand%5D%5B0%5D=Jordan');
                          
                          if (isJordanBrand) {
                              items.sort((a, b) => {
                                  const isJStartA = a.label.toLowerCase().startsWith('j') || a.label.toLowerCase().includes('jordan');
                                  const isJStartB = b.label.toLowerCase().startsWith('j') || b.label.toLowerCase().includes('jordan');
          
                                  if (isJStartA && !isJStartB) {
                                      return -1;
                                  } else if (!isJStartA && isJStartB) {
                                      return 1;
                                  } else {
                                      return a.label.localeCompare(b.label, undefined, { numeric: true, sensitivity: 'base' });
                                  }
                              });
                          } else {
                              items.sort((a, b) => a.label.localeCompare(b.label, undefined, { numeric: true, sensitivity: 'base' }));
                          }
          
                           const visibleItemsCount = items.filter(item => !item.hidden).length;

                            if (visibleItemsCount <= 4) {
                                document.querySelector('.btn_show_model').style.display = 'none';
                            } else {
                                document.querySelector('.btn_show_model').style.display = 'block';
                            }
                
                            if (results.page === 0) {
                                items.forEach((item, index) => {
                                    if (index >= 4) {
                                        item.hidden = true;
                                    }
                                });
                            }
          
                          return items;
                      }
                  })
              ]);
          }
          
          function updateSorting() {
              applySorting('.ais-filter-meta-custom-mtw_category');
          }
          
          applySorting();
          
          var showMoreButtonModel = document.createElement('button');
          showMoreButtonModel.textContent = 'Show More';
          showMoreButtonModel.classList.add('btn_show_model');
          document.querySelector('.ais-filter-meta-custom-mtw_category').appendChild(showMoreButtonModel);
          showMoreButtonModel.addEventListener('click', function() {
                const items = document.querySelectorAll('.ais-filter-meta-custom-mtw_category .ais-refinement-list--item');
                const buttonText = this.textContent.trim();
                const showMore = buttonText === 'Show More';
                items.forEach((item, index) => {
                    if (index >= 4) {
                        item.classList.toggle('hidden', !showMore);
                    }
                });
                this.textContent = showMore ? 'Show Less' : 'Show More';
              const refinementList = document.querySelector('.ais-filter-meta-custom-mtw_category');
              refinementList.classList.toggle('showing-more-model', showMore);
            });
        };
        // setInterval(updateSorting, 1000);

        //color
        if(document.querySelector('.ais-filter-meta-custom-color_filters')) {
       instant.search.addWidgets([
          algolia.externals.widgets.refinementList({
              container: document.querySelector('.ais-filter-meta-custom-color_filters'),
              attribute: 'meta.custom.color_filters',
              limit: 100,
              searchable: false, // Setting searchable to true creates a search input in the refinementList UI        
              templates: {
                  item(item, { html }) {
                          if (item.label !== 'NA') {
                              const { url, label, count, isRefined } = item;
                              const vars = document.querySelector('.showing-more-color');
                              const hiddenClass = vars === null && item.hidden ? 'hidden' : ''; 
                              return html`
                                  <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}" class="ais-refinement-list--item ${hiddenClass}">
                                      <span>${label}</span>
                                  </a>
                              `;
                          }
                  },
              },
              transformItems(items, { results }) {
                  items = items.sort(function(a, b){return parseFloat(a.value) - parseFloat(b.value)});
                  
                   const visibleItemsCount = items.filter(item => !item.hidden).length;
                    if (visibleItemsCount <= 4) {
                        document.querySelector('.btn_show_color').style.display = 'none';
                    } else {
                        document.querySelector('.btn_show_color').style.display = 'block';
                    }
                    if (results.page === 0) {
                        items.forEach((item, index) => {
                            if (index >= 4) {
                                item.hidden = true;
                            }
                        });
                    }
                  
                  return items;
              },
          })
      ]);
      
      var showMoreButtonColor = document.createElement('button');
      showMoreButtonColor.textContent = 'Show More';
      showMoreButtonColor.classList.add('btn_show_color');
      document.querySelector('.ais-filter-meta-custom-color_filters').appendChild(showMoreButtonColor);
      showMoreButtonColor.addEventListener('click', function() {
          const items = document.querySelectorAll('.ais-filter-meta-custom-color_filters .ais-refinement-list--item');
          const buttonText = this.textContent.trim();
          const showMore = buttonText === 'Show More';
          items.forEach((item, index) => {
              if (index >= 4) {
                  item.classList.toggle('hidden', !showMore);
              }
          });
          this.textContent = showMore ? 'Show Less' : 'Show More';
          const refinementList = document.querySelector('.ais-filter-meta-custom-color_filters');
          refinementList.classList.toggle('showing-more-color', showMore);
      });
      };
      //condition
       if(document.querySelector('.ais-filter-meta-custom-condition')) {
      instant.search.addWidgets([
            algolia.externals.widgets.refinementList({
                container: document.querySelector('.ais-filter-meta-custom-condition'),
                attribute: 'meta.custom.condition',
                limit: 100,
                searchable: false, // Setting searchable to true creates a search input in the refinementList UI        
                templates: {
                   item(item, { html }) {
                          if (item.label !== 'NA') {
                              const { url, label, count, isRefined } = item;
                              const vars = document.querySelector('.showing-more-condition');
                              const hiddenClass = vars === null && item.hidden ? 'hidden' : ''; 
                              return html`
                                  <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}" class="ais-refinement-list--item ${hiddenClass}">
                                      <span>${label}</span>
                                  </a>
                              `;
                          }
                    },
                },
                transformItems(items, { results }) {
                    items = items.sort(function(a, b){return parseFloat(a.value) - parseFloat(b.value)});
                   
                   const visibleItemsCount = items.filter(item => !item.hidden).length;
                    if (visibleItemsCount <= 4) {
                        document.querySelector('.btn_show_condition').style.display = 'none';
                    } else {
                        document.querySelector('.btn_show_condition').style.display = 'block';
                    }
                    if (results.page === 0) {
                        items.forEach((item, index) => {
                            if (index >= 4) {
                                item.hidden = true;
                            }
                        });
                    }
                  
                  return items;
                },
            })
        ]);
        var showMoreButtonCondition = document.createElement('button');
        showMoreButtonCondition.textContent = 'Show More';
        showMoreButtonCondition.classList.add('btn_show_condition');
        document.querySelector('.ais-filter-meta-custom-condition').appendChild(showMoreButtonCondition);
        showMoreButtonCondition.addEventListener('click', function() {
            const items = document.querySelectorAll('.ais-filter-meta-custom-condition .ais-refinement-list--item');
            const buttonText = this.textContent.trim();
            const showMore = buttonText === 'Show More';
            items.forEach((item, index) => {
                if (index >= 4) {
                    item.classList.toggle('hidden', !showMore);
                }
            });
            this.textContent = showMore ? 'Show Less' : 'Show More';
            const refinementList = document.querySelector('.ais-filter-meta-custom-color_filters');
            refinementList.classList.toggle('showing-more-condition', showMore);
        });
       };
      //available

      if(document.querySelector('.ais-facet-inventory_available-container')) {
        instant.search.addWidgets([
            algolia.externals.widgets.refinementList({
                container: document.querySelector('.ais-facet-inventory_available-container'),
                attribute: 'inventory_available',
                operator: 'or',
                searchable: false, // Setting searchable to true creates a search input in the refinementList UI
                templates: {
                    item(item, { html }) {
  
                        let { url, label, count, isRefined } = item;
                        return html`              
              <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}">                
                <span> ${label}</span>
              </a>
            `;
                    },
                },
                transformItems(items, { results }) {
                    var selectedValue = []
                    items.forEach(function (item) {
                        if (item.isRefined) {
                            selectedValue.push(item.value)
                        }
                    })
                    var catdata = [{ "count": 6, "isRefined": selectedValue.includes('false') ? true : false, "isExcluded": false, "value": "false", "label": "Sold", "highlighted": "Sold" }, { "count": 6, "isRefined": selectedValue.includes('true') ? true : false, "isExcluded": false, "value": "true", "label": "In Stock", "highlighted": "In Stock" }];
                    //items.concat(catdata);
                    //console.log("Itemsssss =>" + JSON.stringify(items));  
                    return results.page === 0 ? catdata : catdata;
                },
            })
        ])
      };

      if(document.querySelector('.ais-filter-meta-custom-kyx_rating')) {
        instant.search.addWidgets([
            algolia.externals.widgets.rangeSlider({
                container: document.querySelector('.ais-filter-meta-custom-kyx_rating'),
                attribute: 'meta.custom.kyx_rating',
                min: 1,
                max: 10,
                pips: true,
                tooltips: true,
            })
        ])
      }

      //categories
      if(document.querySelector('.ais-filter-collections')) {
        instant.search.addWidgets([
            algolia.externals.widgets.refinementList({
                container: document.querySelector('.ais-filter-collections'),
                attribute: 'collections',
                searchable: true,         
                templates: {
                    item(item, { html }) {
                        let { url, label, count, isRefined } = item;
                        // console.log('Item category =>' + JSON.stringify(item));
                        //if(label == 'men' || label == 'women' || label == 'kids') {
                        return html`              
                            <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}">
                                <span> ${label}</span>
                            </a>
                        `;
                        //}  
                    },
                },
                transformItems(items, { results }) {
                    var selectedCat = [];
                    items.forEach(function (item) {
                        if (item.isRefined) {
                            selectedCat.push(item.value)
                        }
                    })
                    var catdata = [
                        {
                            "count": 6,
                            "isRefined": selectedCat.includes('men') ? true : false,
                            "isExcluded": false,
                            "value": "men",
                            "label": "Men",
                            "highlighted": "men"
                        },
                        {
                            "count": 6,
                            "isRefined": selectedCat.includes('kids') ? true : false,
                            "isExcluded": false,
                            "value": "kids",
                            "label": "Kids",
                            "highlighted": "kids"
                        },
                        {
                            "count": 6,
                            "isRefined": selectedCat.includes('women') ? true : false,
                            "isExcluded": false,
                            "value": "women",
                            "label": "Women",
                            "highlighted": "women"
                        },
                        {
                            "count": 6,
                            "isRefined": selectedCat.includes('shop-all') ? true : false,
                            "isExcluded": false,
                            "value": "shop-all",
                            "label": "Shop all",
                            "highlighted": "shop-all"
                        }];
                    //items.concat(catdata);
                    //console.log("Itemsssss =>" + JSON.stringify(items));  
                    return results.page === 0 ? catdata : catdata; 
                },
  
            })
        ]);
      };
 
         /*instant.search.addWidgets([
  
            algolia.externals.widgets.refinementList({
                container: document.querySelector('.ais-filter-male'),
                attribute: 'meta.custom.Male',
                limit: 100,
                searchable: false, // Setting searchable to true creates a search input in the refinementList UI        
                templates: {
                    item(item, { html }) {
                      if(item.label != 20) {
                        const { url, label, count, isRefined } = item;
                        return html`
                            <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}">
                                <span> ${label}</span>
                            </a>
                        `;
                      }
                    },
                },
                transformItems(items, { results }) {
                    items = items.sort(function(a, b){return parseFloat(a.value) - parseFloat(b.value)});
                    return results.page === 0 ? items : items;
                },
  
            })
        ])
  
        instant.search.addWidgets([
  
            algolia.externals.widgets.refinementList({
                container: document.querySelector('.ais-filter-female'),
                attribute: 'meta.custom.Female',
                limit: 100,
                searchable: true, // Setting searchable to true creates a search input in the refinementList UI        
                templates: {
                    item(item, { html }) {
                      if(item.label != 20) {
                        const { url, label, count, isRefined } = item;
                        return html`
                            <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}">
                                <span> ${label}</span>
                            </a>
                        `;
                      }
                    },
                },
                transformItems(items, { results }) {
                    items = items.sort(function(a, b){return parseFloat(a.value) - parseFloat(b.value)});
                    return results.page === 0 ? items : items;
                },
  
            })
        ])
  
        instant.search.addWidgets([
  
            algolia.externals.widgets.refinementList({
                container: document.querySelector('.ais-filter-youth'),
                attribute: 'meta.custom.youth',
                limit: 100,
                searchable: true, // Setting searchable to true creates a search input in the refinementList UI        
                templates: {
                    item(item, { html }) {
                        if(item.label != 20) {
                          const { url, label, count, isRefined } = item;
                          return html`
                              <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}">
                                  <span> ${label}</span>
                              </a>
                          `;  
                        }
                        
                    },
                },
                transformItems(items, { results }) {
                    items = items.sort(function(a, b){return parseFloat(a.value) - parseFloat(b.value)});
                    return results.page === 0 ? items : items;
                },
  
            })
        ])
  
        */
     
    }, 500)
    
  
    // Change display
    instant.search.addWidgets([
        {
            init: function () {
  
                document
                    .querySelector('.ais-search-header .ais-change-display-block')
                    .addEventListener('click', function () {
                        document
                            .querySelector(
                                '.ais-change-display-block:not(.ais-change-display-selected)'
                            )
                            .classList.add('ais-change-display-selected');
                        document
                            .querySelector(
                                '.ais-change-display-list.ais-change-display-selected'
                            )
                            .classList.remove('ais-change-display-selected');
                        document
                            .querySelector('.ais-results-as-list')
                            .classList.replace('ais-results-as-list', 'ais-results-as-block');
                    });
                document
                    .querySelector('.ais-search-header .ais-change-display-list')
                    .addEventListener('click', function () {
                        document
                            .querySelector(
                                '.ais-change-display-list:not(.ais-change-display-selected)'
                            )
                            .classList.add('ais-change-display-selected');
                        document
                            .querySelector(
                                '.ais-change-display-block.ais-change-display-selected'
                            )
                            .classList.remove('ais-change-display-selected');
                        document
                            .querySelector('.ais-results-as-block')
                            .classList.replace('ais-results-as-block', 'ais-results-as-list');
                    });
            },
        },
    ]);
  
    // Hidden facets
    var list = instant.facets.hidden.map(function (facet) {
        return facet.name;
    });
    console.log('list---',list);
    instant.search.addWidgets([
        {
            getConfiguration: function () {
                return {
                    facets: list,
                    disjunctiveFacets: list,
                };
            },
            init: function () { },
        },
    ]);
  
  
    // Ended Function
  
    // Create the render function
    var createDataAttributes = function (refinement) {
        return Object.keys(refinement)
            .map(function (key) {
                return 'data-' + key + '="' + encodeURIComponent(refinement[key] || '') + '"';
            })
            .join(' ');
    };
  
    var renderListItem = function (item) {
        var facet = instant.facets.list.find(function (f) {
            return f.name === item.label;
        });
        return item.refinements
            .map(function (refinement) {
                if(facet != undefined) {
                    var title = facet.title;
                    var label = refinement.label;
                    if (title == 'Availability') {
                        if (label == 'true') {
                            label = 'In Stock'
                        } else if (label == 'false') {
                            label = 'Sold'
                        }
                    }
                }
                return (
                    '<li class="ais-current-refined-values--item">' +
                    '  <a ' +
                    createDataAttributes(refinement) +
                    '    class="ais-current-refined-values--link">' +
                    '    <div>' +
                    '      <div class="ais-current-refined-values--label">' +
                    title +
                    '      </div>: ' +
                    label +
                    '    </div>' +
                    '  </a>' +
                    '</li>'
                );
            })
            .join('');
    };
  
    var renderCurrentRefinements = function (renderOptions) {
        var items = renderOptions.items;
      
        var refine = renderOptions.refine;
        var widgetParams = renderOptions.widgetParams;
  
        var indexSold = items.findIndex((x) => x.label == 'inventory_available');
     
        window.soldItem = false;
        if (indexSold > -1) {
            var soldItemIndex = items[indexSold].refinements.find((x) => x.value == 'false');
            window.soldItem = false;
            if (soldItemIndex) {
                window.soldItem = true;
            }
        }
  
        widgetParams.container.innerHTML =
            '<div class="ais-current-refined-values--header ais-facet--header ais-header">Selected filters</div>' +
            '<div class="ais-root ais-current-refined-values ais-facet">' +
            '  <ul class="ais-current-refined-values--list">' +
            items.map(renderListItem).join('') +
            '  </ul>' +
            '</div>';
  
        Array.prototype.slice
            .call(
                widgetParams.container.querySelectorAll(
                    '.ais-current-refined-values--link'
                )
            )
            .forEach(function (element) {
                element.addEventListener('click', function (event) {
                    var item = Object.keys(event.currentTarget.dataset).reduce(function (
                        acc,
                        key
                    ) {
                        var itemData = {};
                        itemData[key] = decodeURIComponent(event.currentTarget.dataset[key]);
                        return algolia.assign({}, acc, itemData);
                    },
                        {});
  
                    refine(item);
                });
            });
    };
  
    // Create the custom widget
    var customCurrentRefinements = connectCurrentRefinements(
        renderCurrentRefinements
    );
    
  
    var hasRefinements = function (helper, facetsList) {
        return facetsList.some(function (f) {
            var isConjunctiveFacetRefined =
                helper.state.isConjunctiveFacet(f.name) &&
                helper.state.isFacetRefined(f.name);
            var isDisjunctiveFacetRefined =
                helper.state.isDisjunctiveFacet(f.name) &&
                helper.state.isDisjunctiveFacetRefined(f.name);
            var isHierarchicalFacetRefined =
                helper.state.isHierarchicalFacet(f.name) &&
                helper.state.isHierarchicalFacetRefined(f.name);
  
            var numericRefinements = helper.state.getNumericRefinements(f.name);
            var isNumericFacetRefined = Object.keys(numericRefinements).some(function (
                operator
            ) {
                return numericRefinements[operator].length > 0;
            });
  
            return (
                isNumericFacetRefined ||
                isConjunctiveFacetRefined ||
                isDisjunctiveFacetRefined ||
                isHierarchicalFacetRefined
            );
        });
    };
  
    /**
     * Decides whether the given `facetName` has any facet values available in
     * the current result set by checking the available `facets`,
     * `disjunctiveFacets` and `hierarchicalFacets`.
     */
    var hasFacetValues = function (resultState, facetName) {
        var isFacetValueAvailable = resultState.facets.some(function (facet) {
            return facet.name === facetName;
        });
        var isDisjunctiveFacetValueAvailable = resultState.disjunctiveFacets.some(
            function (facet) {
                return facet.name === facetName;
            }
        );
        var isHierarchicalFacetValueAvailable = resultState.hierarchicalFacets.some(
            function (facet) {
                return facet.name === facetName;
            }
        );
  
        return (
            isFacetValueAvailable ||
            isDisjunctiveFacetValueAvailable ||
            isHierarchicalFacetValueAvailable
        );
    };
  
    var customCurrentRefinementsWithPanel = panel({
        hidden: function (options) {
            return !hasRefinements(options.helper, instant.facets.list);
        },
    })(customCurrentRefinements);
  
    var clearRefinementsWithPanel = panel({
        hidden: function (options) {
            return !hasRefinements(options.helper, instant.facets.list);
        },
    })(clearRefinements);
  
    instant.search.addWidgets([
        clearRefinementsWithPanel({
            container: document.querySelector('.ais-clear-refinements-container'),
            templates: {
                resetLabel: algolia.translations.clearAll,
            },
        }),
        customCurrentRefinementsWithPanel({
            container: document.querySelector(
                '.ais-current-refined-values-container'
            ),
            // transformItems(items) {
            //   items.forEach(function(item, index) {           
            //     if(items[index].attribute == "inventory_available") {
            //       //items[index]['refinements'].label = "In Stock";
            //       //console.log("Item => " + items[index].refinements);
            //     }           
            //   });
            //   //console.log("Item Data => " + JSON.stringify(items));
            //   return items;
            // },
        }),
    ]);
  
  
  
    /**
     * Setup the facets for search.
     * We are using a `panel` with a custom `hidden` function which will allow
     * us to hide the parent container of the facet if there are no facet values
     * available for that particular facet.
     */
    instant.facets.widgets.forEach(function (widget) {
        var facetWithPanel = panel({
            hidden: function (options) {
                var hide = !hasFacetValues(options.results, widget.params.attribute);
                var displayStyle = hide ? 'none' : '';
  
                /**
                 * Replacing any "." and "%" in the class name with "\." and "\%" so that querySelector
                 * can work as expected. "." is supposed to be present for named tags
                 * and metafield based facet names and "%" is present when the facet name has a space
                 * in it because of the encoding.
                 */
                var parentContainerClassName = '.ais-facet-' + encodeURIComponent(
                    widget.params.attribute
                ).replace(/\./g, '\\.').replace(/\%/g, '\\%');
                var parentContainer = document.querySelector(parentContainerClassName);
  
                if (parentContainer) {
                    parentContainer.style.display = displayStyle;
                }
  
                return hide;
            },
        })(widget.widget);
  
        instant.search.addWidgets([facetWithPanel(widget.params)]);
    });
  
    // Hits
    
    instant.search.addWidgets([
        hits({
            container: '.ais-hits-container',
            templates: {
                item(hit, { html, components }) {  
                    var currentUrl = window.location.href;               
                     $('.ais-pagination-container').show();
                     if (currentUrl.startsWith('https://www.kyxsneakers.com/collections/sold-products')) {
                        if (!window.customer){
                         $('.ais-hits-container').hide();
                         $('.ais-pagination-container').hide();
                         $('.signInaccc').html('<h3 class="removeSignIn"><a href="javascript:void(0);" class="signInToAccess">Sign in to access sold sneakers</a></h3>');
                         $('.removeSignIn').add();
                        }
                     }
                     else{
                         $('.ais-hits-container').show();
                         $('.removeSignIn').remove();
                     }

                    if (window.soldItem && !window.customer) {
                        $('.signInaccc').html('<h3 class="removeSignIn"><a href="javascript:void(0);" class="signInToAccess">Sign in to access sold sneakers</a></h3>');
                        $('.ais-pagination-container').hide();
                         $('.ais-hits-container').hide();
                    }
                    $('#price').prop('checked', false)
                    setTimeout(function () {
  
                        $('[name="checkout_url"]').val(window.location.href.replace('https://www.kyxsneakers.com/', '/'));
  
                    }, 500);
                    
                    if(window.location.href.indexOf('shopify_products_published_at_desc') > 0 && window.location.href.indexOf('price') > 0) {
                      if(hit.tags.indexOf('deals_$100-1') >= 0 || hit.tags.indexOf('deals_$100-2') >= 0 || hit.tags.indexOf('deals_$100-3') >= 0) {
                        if(objectHits.findIndex(x => x.handle === hit.handle) < 0) {
                          objectHits.push(hit);   
                        }
                      }  
                    }
          
                    if(window.location.href.indexOf('shopify_products_recently_ordered_count_desc') > 0) {
                      if(hit.tags.indexOf('featured-1') >= 0 || hit.tags.indexOf('featured-2') >= 0 || hit.tags.indexOf('featured-3') >= 0) {
                        
                        if(objectHits.findIndex(x => x.handle === hit.handle) < 0) {
                          objectHits.push(hit);   
                        }
                      }  
                    }
                  // reatiler product
                  setTimeout(function() {
                    if (currentUrl.startsWith('https://www.kyxsneakers.com/search')) {
                         var elements = document.querySelectorAll('.ais-product[data-vendor="Shoe Lace Supply"]');
                          console.log('elements======>', elements);
                         if(elements) {
                           elements.forEach(function(element) {
                                element.closest('.ais-Hits-item').classList.add('hidden');
                            });
                         }
                          
                      }
                  }, 500)

                  setTimeout(function() {
                    if (currentUrl.startsWith('https://www.kyxsneakers.com/collections/sold-products')) {
                         var elements = document.querySelectorAll('.ais-product[data-vendor="Shoe Lace Supply"]');
                          console.log('elements======>', elements);
                         if(elements) {
                           elements.forEach(function(element) {
                                element.closest('.ais-Hits-item').classList.add('hidden');
                            });
                         }
                          
                      }
                  }, 100)
                  
                  // if (currentUrl.startsWith('https://www.kyxsneakers.com/collections/sold-products')) {
                  //     var elements = document.querySelectorAll('.ais-Hits-item');
                  //     if (hit.vendor === 'Shoe Lace Supply' || hit.tags.some(tag => tag === 'Shoe Lace Supply')) {
                  //       elements.forEach(function(element) {
                  //         element.classList.add('lace');
                  //       });
                  //   }
                  // }
                  
                    return algolia.instantSearchProductTemplate(hit, html, components);
                },
                empty(results, { html }) {
                    $('.ais-pagination-container').show();
                   var currentUrl = window.location.href;   
                    if (currentUrl.startsWith('https://www.kyxsneakers.com/collections/sold-products')) {
                        if (!window.customer){
                            $('.ais-hits-container').hide();
                            $('.ais-pagination-container').hide();
                            $('.signInaccc').html('<h3 class="removeSignIn"><a href="javascript:void(0);" class="signInToAccess">Sign in to access sold sneakers</a></h3>');
                            $('.removeSignIn').add();
                        }
                    }
                    else{
                        $('.ais-hits-container').show();
                        $('.removeSignIn').remove();
                    }
                   
                    $('#price').prop('checked', false)
                    if (window.soldItem && !window.customer) {
                        $('.signInaccc').html('<h3 class="removeSignIn"><a href="javascript:void(0);" class="signInToAccess">Sign in to access sold sneakers</a></h3>');
                        $('.ais-pagination-container').hide();
                        $('.ais-hits-container').hide();
                    }
                    return algolia.instantSearchNoResultTemplate(html);
                }
            },
            transformItems: function (items) {
                var currentUrl = window.location.href;
                $('.ais-pagination-container').show();
               
                if (currentUrl.startsWith('https://www.kyxsneakers.com/collections/sold-products')) {
                  
                   if (!window.customer){
                    $('.ais-hits-container').hide();
                    $('.ais-pagination-container').hide();
                    $('.signInaccc').html('<h3 class="removeSignIn"><a href="javascript:void(0);" class="signInToAccess">Sign in to access sold sneakers</a></h3>');
                    $('.removeSignIn').add();
                   }
                }
                else{
                    $('.ais-hits-container').show();
                    $('.removeSignIn').remove();
                }
               
                $('#price').prop('checked', false)
                
                if (window.soldItem && !window.customer) {
                    $('.signInaccc').html('<h3 class="removeSignIn"><a href="javascript:void(0);" class="signInToAccess">Sign in to access sold sneakers</a></h3>');
                    $('.ais-pagination-container').hide();
                    $('.ais-hits-container').hide();
                }
                setTimeout(function () {
                    $('[name="checkout_url"]').val(window.location.href.replace('https://www.kyxsneakers.com/', '/'));
                }, 500)
                window.algoliaItems.push(items)
               // console.log('items 123 ======>', items);

               
                items.forEach((hit) => {
                    // if (currentUrl.startsWith('https://www.kyxsneakers.com/collections/shoe-laces')) {
                    //   console.log('data--',hit.inventory_quantity);
                    //    var elements = document.querySelectorAll('.ais-Hits-item');
                    //       elements.forEach(function(element) {
                    //           if (hit.inventory_available === false || hit.inventory_quantity > 0 ) {
                    //               element.classList.add('lace');
                    //           }
                    //       });
                    //  }
                  
                   if(window.location.href.indexOf('shopify_products_published_at_desc') > 0 && window.location.href.indexOf('price') > 0) {
                      if(hit.tags.indexOf('deals_$100-1') >= 0 || hit.tags.indexOf('deals_$100-2') >= 0 || hit.tags.indexOf('deals_$100-3') >= 0) {
                        if(objectHits.findIndex(x => x.handle === hit.handle) < 0) {
                          objectHits.push(hit); 
                        }
                      }  
                    }
          
                    if(window.location.href.indexOf('shopify_products_recently_ordered_count_desc') > 0) {
                      if(hit.tags.indexOf('featured-1') >= 0 || hit.tags.indexOf('featured-2') >= 0 || hit.tags.indexOf('featured-3') >= 0) {
                        if(objectHits.findIndex(x => x.handle === hit.handle) < 0) {
                          objectHits.push(hit); 
                        }
                      }  
                    }
                })
              

              setTimeout(function() {
                if (currentUrl.startsWith('https://www.kyxsneakers.com/search')) {
                     var elements = document.querySelectorAll('.ais-product[data-vendor="Shoe Lace Supply"]');
                      console.log('elements======>', elements);
                     if(elements) {
                       elements.forEach(function(element) {
                            element.closest('.ais-Hits-item').classList.add('hidden');
                        });
                     }
                      
                  }
              }, 500)
              // setTimeout(function() {
              //       if (currentUrl.startsWith('https://www.kyxsneakers.com/collections/sold-products')) {
              //            var elements = document.querySelectorAll('.ais-product[data-vendor="Shoe Lace Supply"]');
              //             console.log('elements======>', elements);
              //            if(elements) {
              //              elements.forEach(function(element) {
              //                   element.closest('.ais-Hits-item').classList.add('hidden');
              //               });
              //            }
              //         }
              //     }, 100)
                
                return items.map(item => ({
                    ...item,
                    _distinct: instant.distinct,
                    can_order:
                        item.inventory_management !== 'shopify' ||
                        item.inventory_policy === 'continue' ||
                        item.inventory_quantity > 0,
                    queryID: item.__queryID,
                    productPosition: item.__position,
                    index: instant.search.mainIndex.getIndexName()
                }));
            }
        })
      
    ]);
  
    // Redirect to product on click
    instant.search.addWidgets([
        {
            init: function () {
                var container = document.querySelector('.ais-hits-container');
  
                container.addEventListener('click', function (e) {
                    var el = e.target;
                    if (el.classList.contains('customSymsBtn') || el.classList.contains('swym-button')) {
                        return;
                    }
  
                    var hit;
                    do {
                        if (el.matches('.ais-hit')) {
                            hit = el;
                            break;
                        }
                        el = el.parentNode;
                    } while (el && el !== container);
                    if (!hit) {
                        return;
                    }
                    var $this = hit;
                    var productHandle = $this.dataset.handle;
                    var variant_id = $this.dataset.variantId;
                    var distinct = $this.dataset.distinct;
  
                    // Construct the link we should redirect to
                    var link = '';
  
                    // If we're on a collection page and the handle is available
                    // then prefix the product link with the collection handle
                    if (collectionPageEnabled && collectionHandle) {
                        link = '/collections/' + collectionHandle;
                    }
  
                    // Add the product handle to the link
                    link = link + '/products/' + productHandle;
  
                    // Add the variant ID details to redirect to a specific
                    // variant ID if we are showing variants and not products
                    if (distinct !== 'true') {
                        link += '?variant=' + variant_id;
                    }
  
                    if (algolia.config.analytics_enabled) {
  
                        const clickData = {
                            index: hit.dataset.algoliaIndex,
                            eventName: 'click',
                            queryID: hit.dataset.algoliaQueryid,
                            objectIDs: [hit.dataset.algoliaObjectid],
                        };
  
                        /**
                         * Uncomment the following function call to start storing data in
                         * local storage for conversion tracking
                         */
                        // algolia.saveForConversionTracking(clickData);
                    }
  
                    window.location.href = link;
                });
            },
        },
    ]);
  
    // Add to cart
    instant.search.addWidgets([
        {
            init: function () {
                var container = document.querySelector('.ais-hits-container');
                container.addEventListener('click', function (e) {
                    var el = e.target;
                    var cartButton;
                    do {
                        if (el.matches('.ais-hit--cart-button')) {
                            cartButton = el;
                            break;
                        }
                        el = el.parentNode;
                    } while (el && el !== container);
                    if (!cartButton) {
                        return;
                    }
  
                    e.stopPropagation();
                    var $this = cartButton;
                    var formId = $this.dataset.formId;
  
                    if (formId) {
                        document.getElementById(formId).submit();
                    }
                });
            },
        },
    ]);
  
    // No result actions
    instant.search.addWidgets([
        {
            init: function (opts) {
                var container = document.querySelector('.ais-hits-container');
                container.addEventListener('click', function (e) {
                    var el = e.target;
                    var clearFilters;
                    
                    do {
                        if (el.matches('.ais-hit-empty--clear-filters')) {
                            clearFilters = el;
                            break;
                        }
                        el = el.parentNode;
                    } while (el && el !== container);
                    if (!clearFilters) {
                        return;
                    }
  
                    var helper = opts.helper;
                    helper.clearTags();
                    instant.facets.list.forEach(function (facet) {
                        helper.clearRefinements(facet.name);
                    });
                    helper.search();
                });
  
                container.addEventListener('click', function (e) {
                    var el = e.target;
                    var clearInput;
                    do {
                        if (el.matches('.ais-hit-empty--clear-input')) {
                            clearInput = el;
                            break;
                        }
                        el = el.parentNode;
                    } while (el && el !== container);
                    if (!clearInput) {
                        return;
                    }
  
                    opts.helper.setQuery('').search();
                    var input = document.querySelector('.ais-search-box--input');
                    input.value = '';
                    input.focus();
                });
            },
        },
    ]);
  
    // Pagination
    instant.search.addWidgets([
        pagination({
            container: '.ais-pagination-container',
            padding: 2,
        }),
    ]);
  
  
    instant.search.start();
  
    algolia.contentHide.parentNode.removeChild(algolia.contentHide);
  
    $('body').on('click', function () {
        $('.ais-dropdown-checkbox').prop('checked', false)
    })
    $('.ais-facet-dropdown-wrapper').on('click', function (e) {
        e.stopPropagation();
        e.preventDefault();
        if ($(this).find('.ais-dropdown-checkbox').prop('checked')) {
            $(this).find('.ais-dropdown-checkbox').prop('checked', false);
        } else {
            $('.ais-dropdown-checkbox').prop('checked', false)
            $(this).find('.ais-dropdown-checkbox').prop('checked', true);
        }
    })
  
    $('.ais-facet-price-container,.ais-RangeSlider,.ais-filter-options-brand, .ais-filter-meta-custom-kyx_rating, .ais-facet-nestedDropdown-container, .gender, .btn_show_size, .btn_show_brand, .btn_show_model, .btn_show_color').on('click', function (e) {
        e.stopPropagation();
    });
    $('body').on('click', '.closeDrawer', function () {
        $('.ais-facets-button').click();
    });

    //onload all filter are show..
    // $('.ais-facets').css('display', 'none');
    // $(document).ready(function() {
    //     function toggleFacetsVisibility() {
    //         const facetsContainer = $('.ais-facets');
    //         const sortby = $('.ais-sort');
    //         if ($(window).width() >= 1024) {
    //             facetsContainer.css('display', 'none');
    //             sortby.css('display', 'none');
    //             $('.sold_title').css('display', 'block');
    //             setTimeout(function() {
    //                 facetsContainer.css('display', 'block');
    //                 sortby.css('display', 'block');
    //             }, 1000);
    //         }
    //     }
    //     toggleFacetsVisibility();
    //     $(window).resize(function() {
    //         toggleFacetsVisibility();
    //     });
    // });
    
    // end code
  
  // click checkbox and open menu
      $(document).ready(function () {
       $(".ais-filter-male, .ais-filter-youth, .ais-filter-female").css("display", "none");
      var the_checkbox = $('#sizeForMale');
      the_checkbox.click(function () {
          if ($(this).is(':checked')) {
             $(".ais-filter-male").css("display", "block");
            
          } else {
              $(".ais-filter-male").css("display", "none");
          }
      });
  
      var the_checkbox_female = $('#sizeForfeMale');
      the_checkbox_female.click(function () {
          if ($(this).is(':checked')) {
             $(".ais-filter-female").css("display", "block");
            
          } else {
              $(".ais-filter-female").css("display", "none");
          }
      });
  
      var the_checkbox_kids = $('#sizeForkids');
      the_checkbox_kids.click(function (e) {
          e.stopPropagation();
          if ($(this).is(':checked')) {
             $(".ais-filter-youth").css("display", "block");
            
          } else {
              $(".ais-filter-youth").css("display", "none");
          }
      });
    });
  // end
 
    $('body').on('click', '.signInToAccess', function (e) {
        e.preventDefault();
        let mql = window.matchMedia("(max-width: 767px)");
        if (mql.matches) {
            window.location.href = "/account"
        } else {
            setTimeout(function () {
                $('#UserImg')[0].click()
            }, 200)
        }
    });
 
    function swymCallbackFn(swat){
      // your API calls go here
      document.addEventListener("swym:collections-loaded", function(){
  
        swat.initializeActionButtons(".ais-Hits-list");
      })
      // console.log("swat====---",$(".ais-Hits-list"));
    }
    if(!window.SwymCallbacks){
      window.SwymCallbacks = [];
    }
    window.SwymCallbacks.push(swymCallbackFn);
    $(document).ready(function() {
      setTimeout(function() {
        document.dispatchEvent(new CustomEvent("swym:collections-loaded"));  
        }, 1500)    
    });
  
    const myInterval = setInterval(myTimer, 1000);
  
    function myTimer() {
     
      if(objectHits.length > 0) {
        console.log('objectHits======>', objectHits);
        // window.algoliaItems.forEach(item => {
        //   console.log('item======>', item);
          
        // })
        objectHits.forEach((item) => {
          if(window.location.href.indexOf('shopify_products_published_at_desc') > 0 && window.location.href.indexOf('price') > 0) {
            if(item.tags.indexOf('deals_$100-1') >= 0) {
              if(document.querySelector(`[data-handle="${item.handle}"]`) != null) {
                document.querySelector(`[data-handle="${item.handle}"]`).closest('li').classList.add('order-1');  
                myStopFunction();
              }
            }
        
            if(item.tags.indexOf('deals_$100-2') >= 0) {
              if(document.querySelector(`[data-handle="${item.handle}"]`) != null) {
                document.querySelector(`[data-handle="${item.handle}"]`).closest('li').classList.add('order-2');  
                myStopFunction();
              }
            }
        
            if(item.tags.indexOf('deals_$100-3') >= 0) {
              if(document.querySelector(`[data-handle="${item.handle}"]`) != null) {
                document.querySelector(`[data-handle="${item.handle}"]`).closest('li').classList.add('order-3');  
                myStopFunction();
              }
            }
            
          }
  
          if(window.location.href.indexOf('shopify_products_recently_ordered_count_desc') > 0) {
            if(item.tags.indexOf('featured-1') >= 0) {
            if(document.querySelector(`[data-handle="${item.handle}"]`) != null) {
              document.querySelector(`[data-handle="${item.handle}"]`).closest('li').classList.add('order-1');  
              myStopFunction();
            }
          }
      
          if(item.tags.indexOf('featured-2') >= 0) {
            if(document.querySelector(`[data-handle="${item.handle}"]`) != null) {
              document.querySelector(`[data-handle="${item.handle}"]`).closest('li').classList.add('order-2');  
              myStopFunction();
            }
          }
      
          if(item.tags.indexOf('featured-3') >= 0) {
            if(document.querySelector(`[data-handle="${item.handle}"]`) != null) {
              document.querySelector(`[data-handle="${item.handle}"]`).closest('li').classList.add('order-3');  
              myStopFunction();
            }
          }
          }          
        })
      }
    }
    
    function myStopFunction() {
      clearInterval(myInterval);
    }
  })(window.algoliaShopify);




